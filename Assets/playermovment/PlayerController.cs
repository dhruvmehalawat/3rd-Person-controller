//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/playermovment/PlayerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerController"",
    ""maps"": [
        {
            ""name"": ""Player Movents"",
            ""id"": ""9920c17f-a888-4b66-b713-47665ffa2a60"",
            ""actions"": [
                {
                    ""name"": ""Movements"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c0f69455-a9e4-40b6-8894-8285f5c18fa2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseInput"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1a1f8761-66ac-48d3-a4fa-8d2221b12a1e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""551a083b-3cc0-4893-b3bb-308523acfb5a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d3a36fb3-3bc8-4fb2-96a5-107dcbcd0956"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6327d982-d717-48b6-8029-e4e4e5dfd238"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""561c8315-a47e-495f-8834-35377f9a5e6d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7e9c5fef-924a-4fee-8ce9-706e0a85727d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""03560130-e687-4e8f-adf7-131bfc28a945"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""MouseInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player Inputs"",
            ""id"": ""08ed4736-164e-42d3-8d48-309f67121dc5"",
            ""actions"": [
                {
                    ""name"": ""Rolls"",
                    ""type"": ""Button"",
                    ""id"": ""80393b36-63ff-4e92-acb0-209c0ddb5447"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RT"",
                    ""type"": ""Button"",
                    ""id"": ""967daf9c-d76a-41ea-99ce-6c1a72d5615c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RB"",
                    ""type"": ""Button"",
                    ""id"": ""c04c22ee-8254-4e83-926f-967586836bb6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""F"",
                    ""type"": ""Button"",
                    ""id"": ""ab426037-5c1e-4b5e-baf8-073b4fba07d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""06a80599-26af-4343-bd5c-e4eb7ef7d92c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8d416bf9-a2f9-4f2d-8135-b185aa40c8dd"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rolls"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3e1df4e-6a44-442c-b4d7-9e176b797e9a"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72f6fba6-61cc-4dfc-8785-3d96bd8b0ec9"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""668abe8c-9208-4295-90ec-ac75b6d02977"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""F"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f8c60b2-ee01-4437-94ea-61f43beba074"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player Wslots"",
            ""id"": ""049a99cc-f92f-4b14-8d58-883d26ad347c"",
            ""actions"": [
                {
                    ""name"": ""up"",
                    ""type"": ""Button"",
                    ""id"": ""8f57377c-07a4-4ceb-8eab-e8ae020c42b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""down"",
                    ""type"": ""Button"",
                    ""id"": ""26c74462-cd8f-4368-9cdb-16aad7c1a344"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""left"",
                    ""type"": ""Button"",
                    ""id"": ""859f5106-cb44-4776-a131-07cb370ee2d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""right"",
                    ""type"": ""Button"",
                    ""id"": ""f33dbf5f-ff30-43c3-ab8c-780ed89d6214"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3ed90303-865d-4abc-a9cd-06d1de5fba22"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c531233-5dcd-4bf7-b168-f3f8fb80b303"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5447526-69a3-449c-882e-03f5efb22e17"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""551ad662-436c-4457-90ce-243a92eae4fb"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player Movents
        m_PlayerMovents = asset.FindActionMap("Player Movents", throwIfNotFound: true);
        m_PlayerMovents_Movements = m_PlayerMovents.FindAction("Movements", throwIfNotFound: true);
        m_PlayerMovents_MouseInput = m_PlayerMovents.FindAction("MouseInput", throwIfNotFound: true);
        // Player Inputs
        m_PlayerInputs = asset.FindActionMap("Player Inputs", throwIfNotFound: true);
        m_PlayerInputs_Rolls = m_PlayerInputs.FindAction("Rolls", throwIfNotFound: true);
        m_PlayerInputs_RT = m_PlayerInputs.FindAction("RT", throwIfNotFound: true);
        m_PlayerInputs_RB = m_PlayerInputs.FindAction("RB", throwIfNotFound: true);
        m_PlayerInputs_F = m_PlayerInputs.FindAction("F", throwIfNotFound: true);
        m_PlayerInputs_Jump = m_PlayerInputs.FindAction("Jump", throwIfNotFound: true);
        // Player Wslots
        m_PlayerWslots = asset.FindActionMap("Player Wslots", throwIfNotFound: true);
        m_PlayerWslots_up = m_PlayerWslots.FindAction("up", throwIfNotFound: true);
        m_PlayerWslots_down = m_PlayerWslots.FindAction("down", throwIfNotFound: true);
        m_PlayerWslots_left = m_PlayerWslots.FindAction("left", throwIfNotFound: true);
        m_PlayerWslots_right = m_PlayerWslots.FindAction("right", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player Movents
    private readonly InputActionMap m_PlayerMovents;
    private IPlayerMoventsActions m_PlayerMoventsActionsCallbackInterface;
    private readonly InputAction m_PlayerMovents_Movements;
    private readonly InputAction m_PlayerMovents_MouseInput;
    public struct PlayerMoventsActions
    {
        private @PlayerController m_Wrapper;
        public PlayerMoventsActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movements => m_Wrapper.m_PlayerMovents_Movements;
        public InputAction @MouseInput => m_Wrapper.m_PlayerMovents_MouseInput;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovents; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMoventsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMoventsActions instance)
        {
            if (m_Wrapper.m_PlayerMoventsActionsCallbackInterface != null)
            {
                @Movements.started -= m_Wrapper.m_PlayerMoventsActionsCallbackInterface.OnMovements;
                @Movements.performed -= m_Wrapper.m_PlayerMoventsActionsCallbackInterface.OnMovements;
                @Movements.canceled -= m_Wrapper.m_PlayerMoventsActionsCallbackInterface.OnMovements;
                @MouseInput.started -= m_Wrapper.m_PlayerMoventsActionsCallbackInterface.OnMouseInput;
                @MouseInput.performed -= m_Wrapper.m_PlayerMoventsActionsCallbackInterface.OnMouseInput;
                @MouseInput.canceled -= m_Wrapper.m_PlayerMoventsActionsCallbackInterface.OnMouseInput;
            }
            m_Wrapper.m_PlayerMoventsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movements.started += instance.OnMovements;
                @Movements.performed += instance.OnMovements;
                @Movements.canceled += instance.OnMovements;
                @MouseInput.started += instance.OnMouseInput;
                @MouseInput.performed += instance.OnMouseInput;
                @MouseInput.canceled += instance.OnMouseInput;
            }
        }
    }
    public PlayerMoventsActions @PlayerMovents => new PlayerMoventsActions(this);

    // Player Inputs
    private readonly InputActionMap m_PlayerInputs;
    private IPlayerInputsActions m_PlayerInputsActionsCallbackInterface;
    private readonly InputAction m_PlayerInputs_Rolls;
    private readonly InputAction m_PlayerInputs_RT;
    private readonly InputAction m_PlayerInputs_RB;
    private readonly InputAction m_PlayerInputs_F;
    private readonly InputAction m_PlayerInputs_Jump;
    public struct PlayerInputsActions
    {
        private @PlayerController m_Wrapper;
        public PlayerInputsActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rolls => m_Wrapper.m_PlayerInputs_Rolls;
        public InputAction @RT => m_Wrapper.m_PlayerInputs_RT;
        public InputAction @RB => m_Wrapper.m_PlayerInputs_RB;
        public InputAction @F => m_Wrapper.m_PlayerInputs_F;
        public InputAction @Jump => m_Wrapper.m_PlayerInputs_Jump;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInputsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerInputsActions instance)
        {
            if (m_Wrapper.m_PlayerInputsActionsCallbackInterface != null)
            {
                @Rolls.started -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnRolls;
                @Rolls.performed -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnRolls;
                @Rolls.canceled -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnRolls;
                @RT.started -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnRT;
                @RT.performed -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnRT;
                @RT.canceled -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnRT;
                @RB.started -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnRB;
                @RB.performed -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnRB;
                @RB.canceled -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnRB;
                @F.started -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnF;
                @F.performed -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnF;
                @F.canceled -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnF;
                @Jump.started -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerInputsActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_PlayerInputsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Rolls.started += instance.OnRolls;
                @Rolls.performed += instance.OnRolls;
                @Rolls.canceled += instance.OnRolls;
                @RT.started += instance.OnRT;
                @RT.performed += instance.OnRT;
                @RT.canceled += instance.OnRT;
                @RB.started += instance.OnRB;
                @RB.performed += instance.OnRB;
                @RB.canceled += instance.OnRB;
                @F.started += instance.OnF;
                @F.performed += instance.OnF;
                @F.canceled += instance.OnF;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public PlayerInputsActions @PlayerInputs => new PlayerInputsActions(this);

    // Player Wslots
    private readonly InputActionMap m_PlayerWslots;
    private IPlayerWslotsActions m_PlayerWslotsActionsCallbackInterface;
    private readonly InputAction m_PlayerWslots_up;
    private readonly InputAction m_PlayerWslots_down;
    private readonly InputAction m_PlayerWslots_left;
    private readonly InputAction m_PlayerWslots_right;
    public struct PlayerWslotsActions
    {
        private @PlayerController m_Wrapper;
        public PlayerWslotsActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @up => m_Wrapper.m_PlayerWslots_up;
        public InputAction @down => m_Wrapper.m_PlayerWslots_down;
        public InputAction @left => m_Wrapper.m_PlayerWslots_left;
        public InputAction @right => m_Wrapper.m_PlayerWslots_right;
        public InputActionMap Get() { return m_Wrapper.m_PlayerWslots; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerWslotsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerWslotsActions instance)
        {
            if (m_Wrapper.m_PlayerWslotsActionsCallbackInterface != null)
            {
                @up.started -= m_Wrapper.m_PlayerWslotsActionsCallbackInterface.OnUp;
                @up.performed -= m_Wrapper.m_PlayerWslotsActionsCallbackInterface.OnUp;
                @up.canceled -= m_Wrapper.m_PlayerWslotsActionsCallbackInterface.OnUp;
                @down.started -= m_Wrapper.m_PlayerWslotsActionsCallbackInterface.OnDown;
                @down.performed -= m_Wrapper.m_PlayerWslotsActionsCallbackInterface.OnDown;
                @down.canceled -= m_Wrapper.m_PlayerWslotsActionsCallbackInterface.OnDown;
                @left.started -= m_Wrapper.m_PlayerWslotsActionsCallbackInterface.OnLeft;
                @left.performed -= m_Wrapper.m_PlayerWslotsActionsCallbackInterface.OnLeft;
                @left.canceled -= m_Wrapper.m_PlayerWslotsActionsCallbackInterface.OnLeft;
                @right.started -= m_Wrapper.m_PlayerWslotsActionsCallbackInterface.OnRight;
                @right.performed -= m_Wrapper.m_PlayerWslotsActionsCallbackInterface.OnRight;
                @right.canceled -= m_Wrapper.m_PlayerWslotsActionsCallbackInterface.OnRight;
            }
            m_Wrapper.m_PlayerWslotsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @up.started += instance.OnUp;
                @up.performed += instance.OnUp;
                @up.canceled += instance.OnUp;
                @down.started += instance.OnDown;
                @down.performed += instance.OnDown;
                @down.canceled += instance.OnDown;
                @left.started += instance.OnLeft;
                @left.performed += instance.OnLeft;
                @left.canceled += instance.OnLeft;
                @right.started += instance.OnRight;
                @right.performed += instance.OnRight;
                @right.canceled += instance.OnRight;
            }
        }
    }
    public PlayerWslotsActions @PlayerWslots => new PlayerWslotsActions(this);
    public interface IPlayerMoventsActions
    {
        void OnMovements(InputAction.CallbackContext context);
        void OnMouseInput(InputAction.CallbackContext context);
    }
    public interface IPlayerInputsActions
    {
        void OnRolls(InputAction.CallbackContext context);
        void OnRT(InputAction.CallbackContext context);
        void OnRB(InputAction.CallbackContext context);
        void OnF(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IPlayerWslotsActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
    }
}
